
#

>
git + [ bitbucket; gitlab; github ]
-

> Links:
https://comandosgit.github.io/
https://www.freecodecamp.org/portuguese/news/10-comandos-do-git-que-todo-desenvolvedor-deveria-conhecer/


> Terminais:
powershell
gitbash
vscode
-


> Comandos:
Lista com os principais comandos do Git:

> Inicializando
Inicializar um repositório git:
$ git init


> Visualizar modificações
Visualizar os arquivos que foram modificados:
$ git status


Visualizar as modifições realizadas:
$ git diff [--name-only]


Visualizar lista dos commits já realizados:
$ git log [--stat] [--graph] [--author="Autor"] [--decorate]


Visualizar árvore de branchs e commits:
$ git log --graph --pretty=oneline --abbrev-commit


Visualizar log resumido dos commits, mostrando quantidade de commits e quais foram os commits:
$ git shortlog [-sn]


Visualizar detalhes de um commit:
$ git show hash_do_commit


Adicionando e fazendo commit
Adicionar todos os arquivos modificados para serem enviados no commit:
$ git add .


Realizar commit com descrição do que foi modificado:
$ git commit -m "Descrição das modificações"


Realizar commit já adicionando todos os arquivos modificados, que já tenham sido adicionados alguma vez, e enviando a mensagem:
$ git commit -am "Descrição das modificações"


Trabalhando com remoto
Adicionar um repositório remoto:
$ git remote add origin https://github.com/davidalves1/gerador-cnpj.git


Visualizar branchs locais e remotos:
git branch [--list] [-a]


Enviar as modificações commitadas:
$ git push origin master


Criar tags para versionamento:
$ git tag -a 1.0.0 -m "Descrição sobre a versão"
$ git push origin master --tags


Criar um branch e mudar para ele ao mesmo tempo:
$ git checkout -b nome_do_branch


Enviar o branch para o repositório remoto
$ git push origin nome-do-branch


Desfazendo coisas
Remover arquivo do monitoramento do Git:
$ git rm --cached arquivo ou $ git rm arquivo #(OBS: CUIDADO, este último comando exclui o arquivo do HD também)


Apagar branch ou tag remotos:

$ git tag -d 1.0.0 ou $ git branch -d iss42
$ git push origin :1.0.0 ou $ git push origin :iss42


Remover remoto:
$ git remote -v | Para verificar os remotos existentes
$ git remote rm nome_do_remoto


Desfazer mudanças antes de adicionar o arquivo modificado:
$ git checkout nome_do_arquivo


Desfazer mudanças após os arquivo ter sido adicionado à fila:
$ git reset HEAD nome_do_arquivo
$ git checkout nome_do_arquivo


Desfazer alterações após ter realizado o commit:
$ git reset [--soft] [--mixed] [--hard] hash_do_commit_anterior_ao_que_se_quer_excluir


Onde:

--soft: apaga o commit mas deixa os arquivos na fila para commitar novamente;

--mixed: apaga o commit e retira os arquivos da fila para serem commitados;

--hard: apaga o commit e as alterações nos arquivos;


Reverter o que foi enviado. Este comando não apaga o commit, ele faz um novo commit desfazendo o que foi feito no commit escolhido. Usado para salvar sua sexta. :)

$ git revert hash_do_commit_a_ser_revertido


Alterando configurações
Criar um alias para algum comando:
$ git config --global alias.nome_do_alias comando

# Meus alias pessoais
$ git config --global alias.cm commit
$ git config --global alias.ck checkout
$ git config --global alias.st status
$ git config --global alias.ps push
$ git config --global alias.pl pull
$ git config --global alias.br branch

Alterar nome e e-mail do usuário:
$ git config --global user.name "Seu Nome"
$ git config --global user.email "seu@email.com"


Visualizar todas as configurações
$ git config --list
-

git init

git clone [cd: nome da pasta]

git status

git add "nome do arquivo.py" 	[git add .]

git commit

git push

git pull


/

> Configuração:

Configurar o Git para usar com o GitHub através do CMD (Command Prompt), passos:
Instalação do Git: Se o Git ainda não estiver instalado, você pode baixá-lo e instalá-lo a partir do site oficial do Git: git-scm.com.

> Configuração Inicial:
Abra o CMD e configure seu nome de usuário e endereço de e-mail. Isso é importante para que suas contribuições no Git sejam atribuídas corretamente:

- arduino
git config --global user.name "Seu Nome"
git config --global user.email "seu-email@example.com"
Gerar Chave SSH (opcional): Para autenticação mais segura, você pode gerar uma chave SSH e adicioná-la à sua conta do GitHub. Isso evita que você precise inserir sua senha toda vez que interagir com o GitHub via Git. Execute o seguinte comando para gerar a chave SSH:

- css
ssh-keygen -t rsa -b 4096 -C "seu-email@example.com"
Siga as instruções para salvar a chave no diretório padrão (geralmente ~/.ssh/id_rsa).

Adicionar Chave SSH ao GitHub (opcional): Copie a chave pública gerada (id_rsa.pub) para sua área de transferência:

- javascript
Copiar código
clip < ~/.ssh/id_rsa.pub
Em seguida, adicione-a ao GitHub:

Acesse o GitHub e vá para Configurações do perfil -> Chaves SSH e GPG -> Nova Chave SSH.
Cole sua chave SSH e adicione.
Clonar um Repositório Existente: Para clonar um repositório do GitHub para o seu computador local, use o seguinte comando:

- bash
git clone https://github.com/usuario/nome-do-repositorio.git
Substitua usuario pelo nome do usuário do GitHub e nome-do-repositorio pelo nome do repositório que você deseja clonar.

> Adicionar Arquivos, Commit e Push:

Adicionar arquivos ao commit:

- csharp
git add .
Isso adiciona todos os arquivos modificados e novos ao commit. Você também pode especificar arquivos individualmente.

Realizar o commit das alterações:
sql
git commit -m "Mensagem do commit"
Substitua "Mensagem do commit" por uma mensagem descritiva das alterações realizadas.

Enviar alterações para o repositório remoto (GitHub):

perl
Copiar código
git push origin master
Isso envia as alterações do branch local master para o branch master no repositório remoto origin (que é o nome padrão dado ao repositório remoto clonado).


/

> O que que dizer: Initialized empty Git repository in C:/Users/Lenovo/.git/
A mensagem "Initialized empty Git repository in C:/Users/Lenovo/.git/" significa que um repositório Git vazio foi inicializado no diretório C:/Users/Lenovo/. Um repositório Git é o local onde o Git armazena todo o histórico de versões dos arquivos de um projeto.

Nesse caso, o Git criou uma pasta oculta chamada .git dentro do diretório especificado, onde ele irá gerenciar todas as informações relacionadas ao controle de versão (como commits, branches, etc.). Esse repositório ainda está vazio, ou seja, não contém nenhum commit ou arquivo versionado até que você adicione arquivos e faça seu primeiro commit.

/ 


